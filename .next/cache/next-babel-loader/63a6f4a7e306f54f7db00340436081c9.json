{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  // const [currentPage, setCurrentPage] = React.useState(0);\n  const {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(LOCATIONS_QUERY, {\n    variables: {\n      page: 0\n    }\n  });\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      fetchMore({\n        variables: {\n          page: data.locations.info.next\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) return prev;\n          return {\n            locations: _objectSpread({}, prev.locations, {\n              info: _objectSpread({}, fetchMoreResult.locations.info),\n              results: prev.locations.results.concat(fetchMoreResult.locations.results)\n            })\n          };\n        }\n      });\n    }\n\n    return;\n  };\n\n  useInfiniteScroll(loadMore);\n  return __jsx(React.Fragment, null, error && __jsx(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, data && data.locations.results.map(location => __jsx(Link, {\n    href: `/locations/${location.id}`,\n    key: location.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(LocationItem, {\n    location: location,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }))))), loading && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), loading || data && data.locations.info.next && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","Link","useQuery","gql","StyledLocationsContainer","ErrorMessage","Loader","LocationItem","useInfiniteScroll","LOCATIONS_QUERY","LocationsContainer","data","error","loading","fetchMore","variables","page","loadMore","locations","info","next","updateQuery","prev","fetchMoreResult","results","concat","map","location","id"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,UAAvD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,MAAMC,eAAe,GAAGN,GAAI;;;;;;;;;;;;;;;;CAA5B;;AAkBA,MAAMO,kBAAkB,GAAG,MAAM;AAC/B;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAsCZ,QAAQ,CAACO,eAAD,EAAkB;AACpEM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR;AADyD,GAAlB,CAApD;;AAIA,QAAMC,QAAQ,GAAG,MAAM;AACrB,QAAIN,IAAI,CAACO,SAAL,CAAeC,IAAf,CAAoBC,IAAxB,EAA8B;AAC5BN,MAAAA,SAAS,CAAC;AACRC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAEL,IAAI,CAACO,SAAL,CAAeC,IAAf,CAAoBC;AADjB,SADH;AAIRC,QAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,UAAAA;AAAF,SAAP,KAA+B;AAC1C,cAAI,CAACA,eAAL,EAAsB,OAAOD,IAAP;AACtB,iBAAO;AACLJ,YAAAA,SAAS,oBACJI,IAAI,CAACJ,SADD;AAEPC,cAAAA,IAAI,oBAAOI,eAAe,CAACL,SAAhB,CAA0BC,IAAjC,CAFG;AAGPK,cAAAA,OAAO,EAAEF,IAAI,CAACJ,SAAL,CAAeM,OAAf,CAAuBC,MAAvB,CACPF,eAAe,CAACL,SAAhB,CAA0BM,OADnB;AAHF;AADJ,WAAP;AASD;AAfO,OAAD,CAAT;AAiBD;;AACD;AACD,GArBD;;AAuBAhB,EAAAA,iBAAiB,CAACS,QAAD,CAAjB;AAEA,SACE,4BACGL,KAAK,IAAI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,EAEE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,IACHA,IAAI,CAACO,SAAL,CAAeM,OAAf,CAAuBE,GAAvB,CAA2BC,QAAQ,IACjC,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,EAAG,EAAtC;AAAyC,IAAA,GAAG,EAAED,QAAQ,CAACC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAED,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAFJ,CAFF,EAYGd,OAAO,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZd,EAaGA,OAAO,IAAKF,IAAI,IAAIA,IAAI,CAACO,SAAL,CAAeC,IAAf,CAAoBC,IAA5B,IAAoC,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbnD,CADF;AAiBD,CAhDD;;AAkDA,eAAeV,kBAAf","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  // const [currentPage, setCurrentPage] = React.useState(0);\n  const { data, error, loading, fetchMore } = useQuery(LOCATIONS_QUERY, {\n    variables: { page: 0 }\n  });\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      fetchMore({\n        variables: {\n          page: data.locations.info.next\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return {\n            locations: {\n              ...prev.locations,\n              info: { ...fetchMoreResult.locations.info },\n              results: prev.locations.results.concat(\n                fetchMoreResult.locations.results\n              )\n            }\n          };\n        }\n      });\n    }\n    return;\n  };\n\n  useInfiniteScroll(loadMore);\n\n  return (\n    <>\n      {error && <ErrorMessage />}\n      <StyledLocationsContainer>\n        {data &&\n          data.locations.results.map(location => (\n            <Link href={`/locations/${location.id}`} key={location.id}>\n              <a>\n                <LocationItem location={location} />\n              </a>\n            </Link>\n          ))}\n      </StyledLocationsContainer>\n      {loading && <Loader />}\n      {loading || (data && data.locations.info.next && <Loader />)}\n    </>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}