{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const {\n    data,\n    error,\n    refetch,\n    loading,\n    fetchMore\n  } = useQuery(LOCATIONS_QUERY, {\n    variables: {\n      page: currentPage\n    }\n  });\n  const [locations, setLocations] = React.useState([]); // React.useEffect(() => {\n  //   setLocations(prevState =>\n  //     prevState.concat((data && data.locations.results) || [])\n  //   );\n  // }, [data]);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      // setCurrentPage(prev => (prev += 1));\n      refetch();\n      fetchMore({\n        variables: {\n          page: data.locations.info.next - 1\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) return prev;\n          console.log(prev, fetchMoreResult);\n          return _objectSpread({}, prev, {\n            locations: _objectSpread({}, prev.locations, {\n              results: [...prev.locations.results, ...fetchMore.locations.results]\n            })\n          });\n        }\n      }); // setLocations(\n      //   prevState => data && [...prevState, ...data.locations.results]\n      // );\n    }\n\n    return;\n  }; // useInfiniteScroll(loadMore);\n\n\n  return __jsx(React.Fragment, null, error && __jsx(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), data && __jsx(InfiniteScroll, {\n    pageStart: data.locations.info.next - 1,\n    loadMore: loadMore,\n    hasMore: true || false,\n    loader: __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, data.locations.results.map(location => __jsx(Link, {\n    href: `/locations/${location.id}`,\n    key: location.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(LocationItem, {\n    location: location,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }))))));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","Link","useQuery","gql","InfiniteScroll","StyledLocationsContainer","ErrorMessage","Loader","LocationItem","useInfiniteScroll","LOCATIONS_QUERY","LocationsContainer","currentPage","setCurrentPage","useState","data","error","refetch","loading","fetchMore","variables","page","locations","setLocations","loadMore","info","next","updateQuery","prev","fetchMoreResult","console","log","results","map","location","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const { data, error, refetch, loading, fetchMore } = useQuery(\n    LOCATIONS_QUERY,\n    {\n      variables: { page: currentPage }\n    }\n  );\n  const [locations, setLocations] = React.useState([]);\n\n  // React.useEffect(() => {\n  //   setLocations(prevState =>\n  //     prevState.concat((data && data.locations.results) || [])\n  //   );\n  // }, [data]);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      // setCurrentPage(prev => (prev += 1));\n      refetch();\n      fetchMore({\n        variables: {\n          page: data.locations.info.next - 1\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          console.log(prev, fetchMoreResult);\n          return {\n            ...prev,\n            locations: {\n              ...prev.locations,\n              results: [\n                ...prev.locations.results,\n                ...fetchMore.locations.results\n              ]\n            }\n          };\n        }\n      });\n      // setLocations(\n      //   prevState => data && [...prevState, ...data.locations.results]\n      // );\n    }\n    return;\n  };\n\n  // useInfiniteScroll(loadMore);\n\n  return (\n    <>\n      {/* <StyledLocationsContainer> */}\n      {error && <ErrorMessage />}\n      {data && (\n        <InfiniteScroll\n          pageStart={data.locations.info.next - 1}\n          loadMore={loadMore}\n          hasMore={true || false}\n          loader={<Loader />}\n        >\n          {data.locations.results.map(location => (\n            <Link href={`/locations/${location.id}`} key={location.id}>\n              <a>\n                <LocationItem location={location} />\n              </a>\n            </Link>\n          ))}\n        </InfiniteScroll>\n      )}\n\n      {/* </StyledLocationsContainer> */}\n      {/* {loading && <Loader />} */}\n    </>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}