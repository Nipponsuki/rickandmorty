{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { MAX_STORIES } from '../constants';\nimport { debounce } from 'src/utils/debounce';\nvar STORY_INCREMENT = 10;\nexport var useInfinite = function useInfinite(max) {\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var _useState2 = useState(STORY_INCREMENT),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  var handleScroll = debounce(function () {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 500);\n  useEffect(function () {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= max) {\n      setCount(max);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n\n    setLoading(false);\n  }, [loading]);\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      return window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  return {\n    count: count\n  };\n};","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/hooks/useInfinite.js"],"names":["useState","useEffect","MAX_STORIES","debounce","STORY_INCREMENT","useInfinite","max","loading","setLoading","count","setCount","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,IAAMC,eAAe,GAAG,EAAxB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG,EAAI;AAAA,kBACFN,QAAQ,CAAC,KAAD,CADN;AAAA,MACzBO,OADyB;AAAA,MAChBC,UADgB;;AAAA,mBAENR,QAAQ,CAACI,eAAD,CAFF;AAAA,MAEzBK,KAFyB;AAAA,MAElBC,QAFkB;;AAIhC,MAAMC,YAAY,GAAGR,QAAQ,CAAC,YAAM;AAClC,QACES,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAD3B,IAEAV,OAHF,EAIE;AACA,aAAO,KAAP;AACD;;AAEDC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAV4B,EAU1B,GAV0B,CAA7B;AAYAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACM,OAAL,EAAc;;AAEd,QAAIE,KAAK,GAAGL,eAAR,IAA2BE,GAA/B,EAAoC;AAClCI,MAAAA,QAAQ,CAACJ,GAAD,CAAR;AACD,KAFD,MAEO;AACLI,MAAAA,QAAQ,CAACD,KAAK,GAAGL,eAAT,CAAR;AACD;;AAEDI,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAVQ,EAUN,CAACD,OAAD,CAVM,CAAT;AAYAN,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO;AAAA,aAAMC,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC,CAAN;AAAA,KAAP;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO;AAAEF,IAAAA,KAAK,EAALA;AAAF,GAAP;AACD,CAlCM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { MAX_STORIES } from '../constants';\nimport { debounce } from 'src/utils/debounce';\n\nconst STORY_INCREMENT = 10;\n\nexport const useInfinite = max => {\n  const [loading, setLoading] = useState(false);\n  const [count, setCount] = useState(STORY_INCREMENT);\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 500);\n\n  useEffect(() => {\n    if (!loading) return;\n\n    if (count + STORY_INCREMENT >= max) {\n      setCount(max);\n    } else {\n      setCount(count + STORY_INCREMENT);\n    }\n\n    setLoading(false);\n  }, [loading]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return { count };\n};\n"]},"metadata":{},"sourceType":"module"}