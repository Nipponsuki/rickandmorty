{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Locations {\\n    locations {\\n      info {\\n        count\\n        pages\\n        next\\n        prev\\n      }\\n      results {\\n        name\\n        type\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nvar LOCATION_TYPES = {\n  Unknown: unknownTypeImage,\n  Cluster: clusterTypeImage,\n  Dream: dreamTypeImage,\n  FantasyTown: fantasyTownTypeImage,\n  Microverse: microverseTypeImage,\n  Planet: planetTypeImage,\n  Resort: resortTypeImage,\n  SpaceStation: spaceStationTypeImage,\n  TV: tvTypeImage\n};\nvar LOCATIONS_QUERY = gql(_templateObject());\n\nvar LocationsContainer = function LocationsContainer() {\n  var _useQuery = useQuery(LOCATIONS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  return __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, error && __jsx(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }), loading && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), data && data.locations.results.map(function (location) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, location.type), __jsx(\"img\", {\n      src: LOCATION_TYPES[location.type],\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","useQuery","gql","StyledLocationsContainer","ErrorMessage","Loader","unknownTypeImage","clusterTypeImage","dreamTypeImage","fantasyTownTypeImage","microverseTypeImage","planetTypeImage","resortTypeImage","spaceStationTypeImage","tvTypeImage","LOCATION_TYPES","Unknown","Cluster","Dream","FantasyTown","Microverse","Planet","Resort","SpaceStation","TV","LOCATIONS_QUERY","LocationsContainer","data","loading","error","locations","results","map","location","type"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,UAAvD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,oBAAP,MAAiC,mDAAjC;AACA,OAAOC,mBAAP,MAAgC,iDAAhC;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,qBAAP,MAAkC,oDAAlC;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAEV,gBADY;AAErBW,EAAAA,OAAO,EAAEV,gBAFY;AAGrBW,EAAAA,KAAK,EAAEV,cAHc;AAIrBW,EAAAA,WAAW,EAAEV,oBAJQ;AAKrBW,EAAAA,UAAU,EAAEV,mBALS;AAMrBW,EAAAA,MAAM,EAAEV,eANa;AAOrBW,EAAAA,MAAM,EAAEV,eAPa;AAQrBW,EAAAA,YAAY,EAAEV,qBARO;AASrBW,EAAAA,EAAE,EAAEV;AATiB,CAAvB;AAYA,IAAMW,eAAe,GAAGvB,GAAH,mBAArB;;AAiBA,IAAMwB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAAA,kBACEzB,QAAQ,CAACwB,eAAD,CADV;AAAA,MACvBE,IADuB,aACvBA,IADuB;AAAA,MACjBC,OADiB,aACjBA,OADiB;AAAA,MACRC,KADQ,aACRA,KADQ;;AAG/B,SACE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,IAAI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,EAEGD,OAAO,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFd,EAGGD,IAAI,IACPA,IAAI,CAACG,SAAL,CAAeC,OAAf,CAAuBC,GAAvB,CAA2B,UAAAC,QAAQ;AAAA,WAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,QAAQ,CAACC,IAAhB,CADD,EAEC;AAAK,MAAA,GAAG,EAAEnB,cAAc,CAACkB,QAAQ,CAACC,IAAV,CAAxB;AAAyC,MAAA,GAAG,EAAC,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADkC;AAAA,GAAnC,CAJA,CADF;AAeD,CAlBD;;AAoBA,eAAeR,kBAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\n\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\n\nconst LOCATION_TYPES = {\n  Unknown: unknownTypeImage,\n  Cluster: clusterTypeImage,\n  Dream: dreamTypeImage,\n  FantasyTown: fantasyTownTypeImage,\n  Microverse: microverseTypeImage,\n  Planet: planetTypeImage,\n  Resort: resortTypeImage,\n  SpaceStation: spaceStationTypeImage,\n  TV: tvTypeImage\n};\n\nconst LOCATIONS_QUERY = gql`\n  query Locations {\n    locations {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const { data, loading, error } = useQuery(LOCATIONS_QUERY);\n\n  return (\n    <StyledLocationsContainer>\n      {error && <ErrorMessage />}\n      {loading && <Loader />}\n      {data &&\n\t\t\t\tdata.locations.results.map(location =>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>{location.type}</span>\n\t\t\t\t\t\t<img src={LOCATION_TYPES[location.type]} alt=\"\"/>\n\t\t\t\t\t\t\n\n\t\t\t\t\t</div>\n\t\t\t\t)}\n    </StyledLocationsContainer>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}