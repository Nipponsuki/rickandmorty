{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/LocationItem/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { LocationItemContainer, LocationItemInfo, LocationItemImage, Title, Text } from './styles';\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nimport { useQuery } from '@apollo/react-hooks';\nconst LOCATION_QUERY = gql`\n  query Location($id: !String) {\n    location(id: $id) {\n    \tresidents {\n\t\t\t\timage\n    \t}\n    }\n  }\n`;\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\n\nconst LocationItem = ({\n  location: {\n    id,\n    name,\n    type\n  }\n}) => {\n  const {\n    data,\n    loadging,\n    error\n  } = useQuery(LOCATION_QUERY(id));\n  return __jsx(LocationItemContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(LocationItemImage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: LOCATION_TYPES[type.replace(' ', '_').toLowerCase()],\n    alt: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), __jsx(LocationItemInfo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, name), __jsx(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, type)));\n};\n\nexport default LocationItem;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/LocationItem/index.js"],"names":["React","gql","LocationItemContainer","LocationItemInfo","LocationItemImage","Title","Text","unknownTypeImage","clusterTypeImage","dreamTypeImage","fantasyTownTypeImage","microverseTypeImage","planetTypeImage","resortTypeImage","spaceStationTypeImage","tvTypeImage","useQuery","LOCATION_QUERY","LOCATION_TYPES","unknown","cluster","dream","fantasy_town","microverse","planet","resort","space_station","tv","LocationItem","location","id","name","type","data","loadging","error","replace","toLowerCase"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SACEC,qBADF,EAEEC,gBAFF,EAGEC,iBAHF,EAIEC,KAJF,EAKEC,IALF,QAMO,UANP;AAQA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,oBAAP,MAAiC,mDAAjC;AACA,OAAOC,mBAAP,MAAgC,iDAAhC;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,qBAAP,MAAkC,oDAAlC;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,MAAMC,cAAc,GAAGhB,GAAI;;;;;;;;CAA3B;AAUA,MAAMiB,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAEZ,gBADY;AAErBa,EAAAA,OAAO,EAAEZ,gBAFY;AAGrBa,EAAAA,KAAK,EAAEZ,cAHc;AAIrBa,EAAAA,YAAY,EAAEZ,oBAJO;AAKrBa,EAAAA,UAAU,EAAEZ,mBALS;AAMrBa,EAAAA,MAAM,EAAEZ,eANa;AAOrBa,EAAAA,MAAM,EAAEZ,eAPa;AAQrBa,EAAAA,aAAa,EAAEZ,qBARM;AASrBa,EAAAA,EAAE,EAAEZ;AATiB,CAAvB;;AAYA,MAAMa,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAYC,IAAAA;AAAZ;AAAZ,CAAD,KAAsC;AACzD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,MAA4BnB,QAAQ,CAACC,cAAc,CAACa,EAAD,CAAf,CAA1C;AACA,SACE,MAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAEZ,cAAc,CAACc,IAAI,CAACI,OAAL,CAAa,GAAb,EAAkB,GAAlB,EAAuBC,WAAvB,EAAD,CADrB;AAEE,IAAA,GAAG,EAAEL,IAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAOE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQD,IAAR,CADF,EAEE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,IAAP,CAFF,CAPF,CADF;AAcD,CAhBD;;AAkBA,eAAeJ,YAAf","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\n\nimport {\n  LocationItemContainer,\n  LocationItemInfo,\n  LocationItemImage,\n  Title,\n  Text\n} from './styles';\n\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst LOCATION_QUERY = gql`\n  query Location($id: !String) {\n    location(id: $id) {\n    \tresidents {\n\t\t\t\timage\n    \t}\n    }\n  }\n`;\n\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\n\nconst LocationItem = ({ location: { id, name, type } }) => {\n  const { data, loadging, error } = useQuery(LOCATION_QUERY(id));\n  return (\n    <LocationItemContainer>\n      <LocationItemImage>\n        <img\n          src={LOCATION_TYPES[type.replace(' ', '_').toLowerCase()]}\n          alt={type}\n        />\n      </LocationItemImage>\n      <LocationItemInfo>\n        <Title>{name}</Title>\n        <Text>{type}</Text>\n      </LocationItemInfo>\n    </LocationItemContainer>\n  );\n};\n\nexport default LocationItem;\n"]},"metadata":{},"sourceType":"module"}