{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Locations {\\n    locations {\\n      info {\\n        count\\n        pages\\n        next\\n        prev\\n      }\\n      results {\\n        name\\n        type\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer } from './styles';\nimport Loader from '../Loader';\nvar LOCATIONS_QUERY = gql(_templateObject());\n\nvar LocationsContainer = function LocationsContainer() {\n  var _useQuery = useQuery(LOCATIONS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  return __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), data && data.locations.results.map(function (location) {\n    return __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, location.name);\n  }));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","useQuery","gql","StyledLocationsContainer","Loader","LOCATIONS_QUERY","LocationsContainer","data","loading","error","locations","results","map","location","name"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,eAAe,GAAGH,GAAH,mBAArB;;AAiBA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAAA,kBACEL,QAAQ,CAACI,eAAD,CADV;AAAA,MACvBE,IADuB,aACvBA,IADuB;AAAA,MACjBC,OADiB,aACjBA,OADiB;AAAA,MACRC,KADQ,aACRA,KADQ;;AAG/B,SACA,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAGKF,IAAI,IACHA,IAAI,CAACG,SAAL,CAAeC,OAAf,CAAuBC,GAAvB,CAA2B,UAAAC,QAAQ;AAAA,WAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,QAAQ,CAACC,IAAhB,CAAJ;AAAA,GAAnC,CAJN,CADA;AAQD,CAXD;;AAaA,eAAeR,kBAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer } from './styles';\nimport Loader from '../Loader';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations {\n    locations {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const { data, loading, error } = useQuery(LOCATIONS_QUERY);\n\n  return (\n\t\t<StyledLocationsContainer>\n\t\t\t<Loader/>\n      {/* {loading && <Loader />} */}\n      {data &&\n        data.locations.results.map(location => <span>{location.name}</span>)}\n    </StyledLocationsContainer>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}