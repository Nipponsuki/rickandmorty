{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const {\n    data,\n    error,\n    refetch,\n    loading,\n    fetchMore\n  } = useQuery(LOCATIONS_QUERY, {\n    variables: {\n      page: currentPage\n    }\n  });\n  const [locations, setLocations] = React.useState([]); // React.useEffect(() => {\n  //   setLocations(prevState =>\n  //     prevState.concat((data && data.locations.results) || [])\n  //   );\n  // }, [data]);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => prev += 1);\n      return fetchMore({\n        variables: {\n          page: currentPage\n        },\n        updateQuery: (prev, {\n          fetchMoreResult\n        }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            results: [...prev.locations.results, ...fetchMoreResult.locations.results]\n          });\n        }\n      }); // setLocations(\n      //   prevState => data && [...prevState, ...data.locations.results]\n      // );\n    }\n\n    return;\n  };\n\n  useInfiniteScroll(loadMore);\n  return __jsx(React.Fragment, null, __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, error && __jsx(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), locations && locations.map(location => __jsx(Link, {\n    href: `/locations/${location.id}`,\n    key: location.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(LocationItem, {\n    location: location,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))))), loading && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","Link","useQuery","gql","StyledLocationsContainer","ErrorMessage","Loader","LocationItem","useInfiniteScroll","LOCATIONS_QUERY","LocationsContainer","currentPage","setCurrentPage","useState","data","error","refetch","loading","fetchMore","variables","page","locations","setLocations","loadMore","info","next","prev","updateQuery","fetchMoreResult","Object","assign","results","map","location","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,UAAvD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,MAAMC,eAAe,GAAGN,GAAI;;;;;;;;;;;;;;;;CAA5B;;AAkBA,MAAMO,kBAAkB,GAAG,MAAM;AAC/B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,KAAK,CAACa,QAAN,CAAe,CAAf,CAAtC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,MAA+ChB,QAAQ,CAC3DO,eAD2D,EAE3D;AACEU,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAET;AAAR;AADb,GAF2D,CAA7D;AAMA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BtB,KAAK,CAACa,QAAN,CAAe,EAAf,CAAlC,CAR+B,CAU/B;AACA;AACA;AACA;AACA;;AAEA,QAAMU,QAAQ,GAAG,MAAM;AACrB,QAAIT,IAAI,CAACO,SAAL,CAAeG,IAAf,CAAoBC,IAAxB,EAA8B;AAC5Bb,MAAAA,cAAc,CAACc,IAAI,IAAKA,IAAI,IAAI,CAAlB,CAAd;AACA,aAAOR,SAAS,CAAC;AACfC,QAAAA,SAAS,EAAE;AACTC,UAAAA,IAAI,EAAET;AADG,SADI;AAIfgB,QAAAA,WAAW,EAAE,CAACD,IAAD,EAAO;AAAEE,UAAAA;AAAF,SAAP,KAA+B;AAC1C,cAAI,CAACA,eAAL,EAAsB,OAAOF,IAAP;AACtB,iBAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,EAAwB;AAC7BK,YAAAA,OAAO,EAAE,CACP,GAAGL,IAAI,CAACL,SAAL,CAAeU,OADX,EAEP,GAAGH,eAAe,CAACP,SAAhB,CAA0BU,OAFtB;AADoB,WAAxB,CAAP;AAMD;AAZc,OAAD,CAAhB,CAF4B,CAgB5B;AACA;AACA;AACD;;AACD;AACD,GAtBD;;AAwBAvB,EAAAA,iBAAiB,CAACe,QAAD,CAAjB;AAEA,SACE,4BACE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KAAK,IAAI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,EAEGM,SAAS,IACRA,SAAS,CAACW,GAAV,CAAcC,QAAQ,IACpB,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,EAAG,EAAtC;AAAyC,IAAA,GAAG,EAAED,QAAQ,CAACC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAED,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAHJ,CADF,EAYGhB,OAAO,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZd,CADF;AAgBD,CA1DD;;AA4DA,eAAeP,kBAAf","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const { data, error, refetch, loading, fetchMore } = useQuery(\n    LOCATIONS_QUERY,\n    {\n      variables: { page: currentPage }\n    }\n  );\n  const [locations, setLocations] = React.useState([]);\n\n  // React.useEffect(() => {\n  //   setLocations(prevState =>\n  //     prevState.concat((data && data.locations.results) || [])\n  //   );\n  // }, [data]);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => (prev += 1));\n      return fetchMore({\n        variables: {\n          page: currentPage\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev;\n          return Object.assign({}, prev, {\n            results: [\n              ...prev.locations.results,\n              ...fetchMoreResult.locations.results\n            ]\n          });\n        }\n      });\n      // setLocations(\n      //   prevState => data && [...prevState, ...data.locations.results]\n      // );\n    }\n    return;\n  };\n\n  useInfiniteScroll(loadMore);\n\n  return (\n    <>\n      <StyledLocationsContainer>\n        {error && <ErrorMessage />}\n        {locations &&\n          locations.map(location => (\n            <Link href={`/locations/${location.id}`} key={location.id}>\n              <a>\n                <LocationItem location={location} />\n              </a>\n            </Link>\n          ))}\n      </StyledLocationsContainer>\n      {loading && <Loader />}\n    </>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}