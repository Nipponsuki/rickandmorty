{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/ResidentDetails/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { ResidentDetailsContainer, ResidentImage, ResidentInfo } from './styles';\nimport { Title } from '../LocationsContainer/LocationItem/styles';\nconst RESIDENT_QUERY = gql`\n  query Character($id: ID!) {\n    character(id: $id) {\n      id\n      image\n      name\n      status\n      origin {\n        name\n      }\n    }\n  }\n`;\n\nconst ResidentDetails = ({\n  id\n}) => {\n  const {\n    data\n  } = useQuery(RESIDENT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  return __jsx(React.Fragment, null, data && __jsx(ResidentDetailsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, __jsx(ResidentImage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: data.character.image,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  })), __jsx(ResidentInfo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, data.character.image))));\n};\n\nexport default ResidentDetails;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/ResidentDetails/index.js"],"names":["React","gql","useQuery","ResidentDetailsContainer","ResidentImage","ResidentInfo","Title","RESIDENT_QUERY","ResidentDetails","id","data","variables","character","image"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,SACEC,wBADF,EAEEC,aAFF,EAGEC,YAHF,QAIO,UAJP;AAKA,SAASC,KAAT,QAAsB,2CAAtB;AAEA,MAAMC,cAAc,GAAGN,GAAI;;;;;;;;;;;;CAA3B;;AAcA,MAAMO,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAWR,QAAQ,CAACK,cAAD,EAAiB;AACxCI,IAAAA,SAAS,EAAE;AAAEF,MAAAA;AAAF;AAD6B,GAAjB,CAAzB;AAGA,SACE,4BACGC,IAAI,IACH,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEA,IAAI,CAACE,SAAL,CAAeC,KAAzB;AAAgC,IAAA,GAAG,EAAC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQH,IAAI,CAACE,SAAL,CAAeC,KAAvB,CADF,CAJF,CAFJ,CADF;AAcD,CAlBD;;AAoBA,eAAeL,eAAf","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport {\n  ResidentDetailsContainer,\n  ResidentImage,\n  ResidentInfo\n} from './styles';\nimport { Title } from '../LocationsContainer/LocationItem/styles';\n\nconst RESIDENT_QUERY = gql`\n  query Character($id: ID!) {\n    character(id: $id) {\n      id\n      image\n      name\n      status\n      origin {\n        name\n      }\n    }\n  }\n`;\n\nconst ResidentDetails = ({ id }) => {\n  const { data } = useQuery(RESIDENT_QUERY, {\n    variables: { id }\n  });\n  return (\n    <>\n      {data && (\n        <ResidentDetailsContainer>\n          <ResidentImage>\n            <img src={data.character.image} alt=\"\" />\n          </ResidentImage>\n          <ResidentInfo>\n            <Title>{data.character.image}</Title>\n          </ResidentInfo>\n        </ResidentDetailsContainer>\n      )}\n    </>\n  );\n};\n\nexport default ResidentDetails;\n"]},"metadata":{},"sourceType":"module"}