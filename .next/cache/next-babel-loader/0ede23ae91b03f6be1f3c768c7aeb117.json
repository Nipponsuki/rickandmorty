{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Locations {\\n    locations {\\n      info {\\n        count\\n        pages\\n        next\\n        prev\\n      }\\n      results {\\n        name\\n        type\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nvar LOCATIONS_QUERY = gql(_templateObject());\n\nvar LocationsContainer = function LocationsContainer() {\n  var _useQuery = useQuery(LOCATIONS_QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var locations = data.locations,\n      info = data.info;\n  return __jsx(React.Fragment, null, data && JSON.stringify(locations));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","useQuery","gql","LOCATIONS_QUERY","LocationsContainer","data","loading","error","locations","info","JSON","stringify"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,eAAe,GAAGD,GAAH,mBAArB;;AAkBA,IAAME,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAAA,kBACAH,QAAQ,CAACE,eAAD,CADR;AAAA,MACxBE,IADwB,aACxBA,IADwB;AAAA,MAClBC,OADkB,aAClBA,OADkB;AAAA,MACTC,KADS,aACTA,KADS;;AAAA,MAExBC,SAFwB,GAEJH,IAFI,CAExBG,SAFwB;AAAA,MAEbC,IAFa,GAEJJ,IAFI,CAEbI,IAFa;AAIhC,SACC,4BACEJ,IAAI,IAAIK,IAAI,CAACC,SAAL,CAAeH,SAAf,CADV,CADD;AAKA,CATD;;AAWA,eAAeJ,kBAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations {\n    locations {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n      }\n    }\n  }\n`;\n\n\nconst LocationsContainer = () => {\n\tconst { data, loading, error} = useQuery(LOCATIONS_QUERY);\n\tconst { locations, info } = data;\n\n\treturn (\n\t\t<>\n\t\t\t{data && JSON.stringify(locations)}\n\t\t</>\n\t)\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}