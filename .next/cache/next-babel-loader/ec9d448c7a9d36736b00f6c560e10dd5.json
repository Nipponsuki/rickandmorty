{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [locations, setLocations] = React.useState([]);\n  const {\n    data,\n    error,\n    refetch,\n    loading\n  } = useQuery(LOCATIONS_QUERY, {\n    variables: {\n      page: currentPage\n    }\n  });\n  React.useState(() => {\n    setLocations(prevState => [...prevState, ...data.locations.results]);\n  }, []);\n  console.log(locations);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => prev += 1);\n      refetch();\n      setLocations(prevState => data && [...prevState, ...data.locations.results]);\n    }\n\n    return;\n  };\n\n  useInfiniteScroll(loadMore);\n  return __jsx(React.Fragment, null, __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, error && __jsx(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), locations && locations.map(location => __jsx(Link, {\n    href: `/locations/${location.id}`,\n    key: location.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(LocationItem, {\n    location: location,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })))), loading && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","Link","useQuery","gql","StyledLocationsContainer","ErrorMessage","Loader","LocationItem","useInfiniteScroll","LOCATIONS_QUERY","LocationsContainer","currentPage","setCurrentPage","useState","locations","setLocations","data","error","refetch","loading","variables","page","prevState","results","console","log","loadMore","info","next","prev","map","location","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,UAAvD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,MAAMC,eAAe,GAAGN,GAAI;;;;;;;;;;;;;;;;CAA5B;;AAkBA,MAAMO,kBAAkB,GAAG,MAAM;AAC/B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,KAAK,CAACa,QAAN,CAAe,CAAf,CAAtC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bf,KAAK,CAACa,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAoCjB,QAAQ,CAACO,eAAD,EAAkB;AAClEW,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAEV;AAAR;AADuD,GAAlB,CAAlD;AAIAX,EAAAA,KAAK,CAACa,QAAN,CAAe,MAAM;AACnBE,IAAAA,YAAY,CAACO,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe,GAAGN,IAAI,CAACF,SAAL,CAAeS,OAAjC,CAAd,CAAZ;AACD,GAFD,EAEG,EAFH;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;;AAEA,QAAMY,QAAQ,GAAG,MAAM;AACrB,QAAIV,IAAI,CAACF,SAAL,CAAea,IAAf,CAAoBC,IAAxB,EAA8B;AAC5BhB,MAAAA,cAAc,CAACiB,IAAI,IAAKA,IAAI,IAAI,CAAlB,CAAd;AACAX,MAAAA,OAAO;AACPH,MAAAA,YAAY,CACVO,SAAS,IAAIN,IAAI,IAAI,CAAC,GAAGM,SAAJ,EAAe,GAAGN,IAAI,CAACF,SAAL,CAAeS,OAAjC,CADX,CAAZ;AAGD;;AACD;AACD,GATD;;AAUAf,EAAAA,iBAAiB,CAACkB,QAAD,CAAjB;AAEA,SACE,4BACE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,IAAI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,EAEGH,SAAS,IACRA,SAAS,CAACgB,GAAV,CAAcC,QAAQ,IACpB,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,EAAG,EAAtC;AAAyC,IAAA,GAAG,EAAED,QAAQ,CAACC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAED,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAHJ,EAUGZ,OAAO,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVd,CADF,CADF;AAgBD,CAzCD;;AA2CA,eAAeT,kBAAf","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [locations, setLocations] = React.useState([]);\n  const { data, error, refetch, loading } = useQuery(LOCATIONS_QUERY, {\n    variables: { page: currentPage }\n  });\n\n  React.useState(() => {\n    setLocations(prevState => [...prevState, ...data.locations.results]);\n  }, []);\n\n  console.log(locations);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => (prev += 1));\n      refetch();\n      setLocations(\n        prevState => data && [...prevState, ...data.locations.results]\n      );\n    }\n    return;\n  };\n  useInfiniteScroll(loadMore);\n\n  return (\n    <>\n      <StyledLocationsContainer>\n        {error && <ErrorMessage />}\n        {locations &&\n          locations.map(location => (\n            <Link href={`/locations/${location.id}`} key={location.id}>\n              <a>\n                <LocationItem location={location} />\n              </a>\n            </Link>\n          ))}\n        {loading && <Loader />}\n      </StyledLocationsContainer>\n    </>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}