{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nimport Link from 'next/link';\nimport { LoaderContainer } from '../Loader/styles';\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\nconst LOCATIONS_QUERY = gql`\n  query Locations {\n    locations {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n\t\t\t\tid\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(LOCATIONS_QUERY);\n  return __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, error && __jsx(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), loading && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), data && data.locations.results.map(location => __jsx(Link, {\n    href: `/locations/${location.id}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, location.type), __jsx(\"img\", {\n    src: LOCATION_TYPES[location.type.replace(' ', '_').toLowerCase()],\n    alt: location.type,\n    style: {\n      width: '50px',\n      height: '50px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })))));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","useQuery","gql","StyledLocationsContainer","ErrorMessage","Loader","unknownTypeImage","clusterTypeImage","dreamTypeImage","fantasyTownTypeImage","microverseTypeImage","planetTypeImage","resortTypeImage","spaceStationTypeImage","tvTypeImage","Link","LoaderContainer","LOCATION_TYPES","unknown","cluster","dream","fantasy_town","microverse","planet","resort","space_station","tv","LOCATIONS_QUERY","LocationsContainer","data","loading","error","locations","results","map","location","id","type","replace","toLowerCase","width","height"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,UAAvD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,oBAAP,MAAiC,mDAAjC;AACA,OAAOC,mBAAP,MAAgC,iDAAhC;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,qBAAP,MAAkC,oDAAlC;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAEZ,gBADY;AAErBa,EAAAA,OAAO,EAAEZ,gBAFY;AAGrBa,EAAAA,KAAK,EAAEZ,cAHc;AAIrBa,EAAAA,YAAY,EAAEZ,oBAJO;AAKrBa,EAAAA,UAAU,EAAEZ,mBALS;AAMrBa,EAAAA,MAAM,EAAEZ,eANa;AAOrBa,EAAAA,MAAM,EAAEZ,eAPa;AAQrBa,EAAAA,aAAa,EAAEZ,qBARM;AASrBa,EAAAA,EAAE,EAAEZ;AATiB,CAAvB;AAYA,MAAMa,eAAe,GAAGzB,GAAI;;;;;;;;;;;;;;;;CAA5B;;AAkBA,MAAM0B,kBAAkB,GAAG,MAAM;AAC/B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2B9B,QAAQ,CAAC0B,eAAD,CAAzC;AAEA,SACE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,KAAK,IAAI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,EAEAD,OAAO,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFX,EAGGD,IAAI,IACHA,IAAI,CAACG,SAAL,CAAeC,OAAf,CAAuBC,GAAvB,CAA2BC,QAAQ,IACjC,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,EAAG,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,QAAQ,CAACE,IAAhB,CADF,EAEE;AACE,IAAA,GAAG,EACDpB,cAAc,CAACkB,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,GAAtB,EAA2B,GAA3B,EAAgCC,WAAhC,EAAD,CAFlB;AAIE,IAAA,GAAG,EAAEJ,QAAQ,CAACE,IAJhB;AAKE,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CAJJ,CADF;AAqBD,CAxBD;;AA0BA,eAAeb,kBAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\n\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nimport Link from 'next/link';\nimport { LoaderContainer } from '../Loader/styles';\n\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\n\nconst LOCATIONS_QUERY = gql`\n  query Locations {\n    locations {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n\t\t\t\tid\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const { data, loading, error } = useQuery(LOCATIONS_QUERY);\n\n  return (\n    <StyledLocationsContainer>\n      {error && <ErrorMessage />}\n\t\t\t{loading && <Loader />}\n      {data &&\n        data.locations.results.map(location => (\n          <Link href={`/locations/${location.id}`}>\n            <div>\n              <span>{location.type}</span>\n              <img\n                src={\n                  LOCATION_TYPES[location.type.replace(' ', '_').toLowerCase()]\n                }\n                alt={location.type}\n                style={{ width: '50px', height: '50px' }}\n              />\n            </div>\n          </Link>\n        ))}\n    </StyledLocationsContainer>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}