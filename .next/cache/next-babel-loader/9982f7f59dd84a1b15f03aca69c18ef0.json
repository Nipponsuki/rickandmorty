{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { debounce } from 'src/utils/debounce';\nexport var useInfiniteScroll = function useInfiniteScroll(cb) {\n  var _useState = useState(false),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var handleScroll = debounce(function () {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || loading) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 500);\n  useEffect(function () {\n    if (!loading) return;\n    cb();\n    setLoading(false);\n  }, [cb, loading]);\n  useEffect(function () {\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      return window.removeEventListener('scroll', handleScroll);\n    };\n  }, [handleScroll]);\n  return {\n    loading: loading\n  };\n};","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","debounce","useInfiniteScroll","cb","loading","setLoading","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,EAAE,EAAI;AAAA,kBACPJ,QAAQ,CAAC,KAAD,CADD;AAAA,MAC9BK,OAD8B;AAAA,MACrBC,UADqB;;AAGrC,MAAMC,YAAY,GAAGL,QAAQ,CAAC,YAAM;AAClC,QACEM,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KACEF,QAAQ,CAACC,eAAT,CAAyBE,YAD3B,IAEAR,OAHF,EAIE;AACA,aAAO,KAAP;AACD;;AAEDC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAV4B,EAU1B,GAV0B,CAA7B;AAYAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACI,OAAL,EAAc;AACdD,IAAAA,EAAE;AACFE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAJQ,EAIN,CAACF,EAAD,EAAKC,OAAL,CAJM,CAAT;AAMAJ,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCP,YAAlC;AACA,WAAO;AAAA,aAAMC,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCR,YAArC,CAAN;AAAA,KAAP;AACD,GAHQ,EAGN,CAACA,YAAD,CAHM,CAAT;AAKA,SAAO;AAAEF,IAAAA,OAAO,EAAPA;AAAF,GAAP;AACD,CA3BM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { debounce } from 'src/utils/debounce';\n\nexport const useInfiniteScroll = cb => {\n  const [loading, setLoading] = useState(false);\n\n  const handleScroll = debounce(() => {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n        document.documentElement.offsetHeight ||\n      loading\n    ) {\n      return false;\n    }\n\n    setLoading(true);\n  }, 500);\n\n  useEffect(() => {\n    if (!loading) return;\n    cb();\n    setLoading(false);\n  }, [cb, loading]);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [handleScroll]);\n\n  return { loading };\n};\n"]},"metadata":{},"sourceType":"module"}