{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/LocationItem/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { LocationItemContainer, LocationItemInfo, LocationItemImage, Title, Text, LocationItemResidentsContainer, LocationItemResident } from './styles';\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nimport { LOADER_URL } from 'src/components/Loader';\nconst LOCATION_QUERY = gql`\n  query Location($id: ID!) {\n    location(id: $id) {\n      residents {\n        image\n        id\n        name\n      }\n    }\n  }\n`;\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\n\nconst LocationItem = ({\n  location: {\n    id,\n    name,\n    type\n  }\n}) => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(LOCATION_QUERY, {\n    variables: {\n      id\n    }\n  });\n  console.log(data);\n  return __jsx(LocationItemContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(LocationItemImage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: LOCATION_TYPES[type.replace(' ', '_').toLowerCase()],\n    alt: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), __jsx(LocationItemInfo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, __jsx(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, name), __jsx(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, type), __jsx(LocationItemResidentsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, data && data.location.residents.slice(0, 3).map(resident => __jsx(LocationItemResident, {\n    key: resident.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: !resident.image ? LOADER_URL : resident.image,\n    alt: resident.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }))))));\n};\n\nexport default LocationItem;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/LocationItem/index.js"],"names":["React","gql","useQuery","LocationItemContainer","LocationItemInfo","LocationItemImage","Title","Text","LocationItemResidentsContainer","LocationItemResident","unknownTypeImage","clusterTypeImage","dreamTypeImage","fantasyTownTypeImage","microverseTypeImage","planetTypeImage","resortTypeImage","spaceStationTypeImage","tvTypeImage","LOADER_URL","LOCATION_QUERY","LOCATION_TYPES","unknown","cluster","dream","fantasy_town","microverse","planet","resort","space_station","tv","LocationItem","location","id","name","type","data","loading","error","variables","console","log","replace","toLowerCase","residents","slice","map","resident","image"],"mappings":"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","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport {\n  LocationItemContainer,\n  LocationItemInfo,\n  LocationItemImage,\n  Title,\n  Text,\n  LocationItemResidentsContainer,\n  LocationItemResident\n} from './styles';\n\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nimport { LOADER_URL } from 'src/components/Loader';\n\nconst LOCATION_QUERY = gql`\n  query Location($id: ID!) {\n    location(id: $id) {\n      residents {\n        image\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\n\nconst LocationItem = ({ location: { id, name, type } }) => {\n  const { data, loading, error } = useQuery(LOCATION_QUERY, {\n    variables: { id }\n  });\n\n  console.log(data);\n  return (\n    <LocationItemContainer>\n      <LocationItemImage>\n        <img\n          src={LOCATION_TYPES[type.replace(' ', '_').toLowerCase()]}\n          alt={type}\n        />\n      </LocationItemImage>\n      <LocationItemInfo>\n        <Title>{name}</Title>\n        <Text>{type}</Text>\n        <LocationItemResidentsContainer>\n          {data &&\n            data.location.residents.slice(0, 3).map(resident => (\n              <LocationItemResident key={resident.id}>\n                <img\n                  src={!resident.image ? LOADER_URL : resident.image}\n                  alt={resident.name}\n                />\n              </LocationItemResident>\n            ))}\n        </LocationItemResidentsContainer>\n      </LocationItemInfo>\n    </LocationItemContainer>\n  );\n};\n\nexport default LocationItem;\n"]},"metadata":{},"sourceType":"module"}