{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport Link from 'next/link';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const {\n    data,\n    error,\n    refetch\n  } = useQuery(LOCATIONS_QUERY, {\n    variables: {\n      page: currentPage\n    }\n  });\n  const {\n    loading\n  } = useInfiniteScroll(loadMore);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => prev += 1);\n      refetch();\n    }\n\n    return;\n  };\n\n  console.log(data);\n  return __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, error && __jsx(ErrorMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), loading && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    type: \"button\",\n    onClick: loadMore,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"More\"), data && data.locations.results.map(location => __jsx(Link, {\n    href: `/locations/${location.id}`,\n    key: location.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(LocationItem, {\n    location: location,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })))));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","useQuery","gql","StyledLocationsContainer","ErrorMessage","Loader","LocationItem","Link","useInfiniteScroll","LOCATIONS_QUERY","LocationsContainer","currentPage","setCurrentPage","useState","data","error","refetch","variables","page","loading","loadMore","locations","info","next","prev","console","log","results","map","location","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,UAAvD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,MAAMC,eAAe,GAAGP,GAAI;;;;;;;;;;;;;;;;CAA5B;;AAkBA,MAAMQ,kBAAkB,GAAG,MAAM;AAC/B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCZ,KAAK,CAACa,QAAN,CAAe,CAAf,CAAtC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2Bf,QAAQ,CAACQ,eAAD,EAAkB;AACzDQ,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAEP;AAAR;AAD8C,GAAlB,CAAzC;AAGA,QAAM;AAAEQ,IAAAA;AAAF,MAAcX,iBAAiB,CAACY,QAAD,CAArC;;AAEA,QAAMA,QAAQ,GAAG,MAAM;AACrB,QAAIN,IAAI,CAACO,SAAL,CAAeC,IAAf,CAAoBC,IAAxB,EAA8B;AAC5BX,MAAAA,cAAc,CAACY,IAAI,IAAKA,IAAI,IAAI,CAAlB,CAAd;AACAR,MAAAA,OAAO;AACR;;AACD;AACD,GAND;;AAOAS,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACA,SACE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,KAAK,IAAI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADZ,EAEGI,OAAO,IAAI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFd,EAGE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,EAMGN,IAAI,IACHA,IAAI,CAACO,SAAL,CAAeM,OAAf,CAAuBC,GAAvB,CAA2BC,QAAQ,IACjC,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,EAAG,EAAtC;AAAyC,IAAA,GAAG,EAAED,QAAQ,CAACC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAED,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAPJ,CADF;AAiBD,CAhCD;;AAkCA,eAAenB,kBAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport Link from 'next/link';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const { data, error, refetch } = useQuery(LOCATIONS_QUERY, {\n    variables: { page: currentPage }\n  });\n  const { loading } = useInfiniteScroll(loadMore);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => (prev += 1));\n      refetch();\n    }\n    return;\n  };\n  console.log(data);\n  return (\n    <StyledLocationsContainer>\n      {error && <ErrorMessage />}\n      {loading && <Loader />}\n      <button type=\"button\" onClick={loadMore}>\n        More\n      </button>\n      {data &&\n        data.locations.results.map(location => (\n          <Link href={`/locations/${location.id}`} key={location.id}>\n            <a>\n              <LocationItem location={location} />\n            </a>\n          </Link>\n        ))}\n    </StyledLocationsContainer>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}