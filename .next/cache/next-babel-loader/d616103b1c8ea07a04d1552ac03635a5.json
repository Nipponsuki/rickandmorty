{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const {\n    data,\n    error,\n    refetch,\n    loading\n  } = useQuery(LOCATIONS_QUERY, {\n    variables: {\n      page: currentPage\n    }\n  });\n  const [locations, setLocations] = React.useState([]); // React.useEffect(() => {\n  //   setLocations(prevState =>\n  //     prevState.concat((data && data.locations.results) || [])\n  //   );\n  // }, [data]);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => prev += 1);\n      refetch(); // setLocations(\n      //   prevState => data && [...prevState, ...data.locations.results]\n      // );\n    }\n\n    return;\n  };\n\n  useInfiniteScroll(loadMore);\n  return __jsx(React.Fragment, null, __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, __jsx(InfiniteScroll, {\n    dataLength: data.locations.info.count,\n    next: fetchData,\n    hasMore: true,\n    loader: __jsx(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, data && data.locations.results.map(location => __jsx(Link, {\n    href: `/locations/${location.id}`,\n    key: location.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, __jsx(LocationItem, {\n    location: location,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })))))));\n};\n\nexport default LocationsContainer;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/index.js"],"names":["React","Link","useQuery","gql","InfiniteScroll","StyledLocationsContainer","ErrorMessage","Loader","LocationItem","useInfiniteScroll","LOCATIONS_QUERY","LocationsContainer","currentPage","setCurrentPage","useState","data","error","refetch","loading","variables","page","locations","setLocations","loadMore","info","next","prev","count","fetchData","results","map","location","id"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,SAASC,wBAAT,EAAmCC,YAAnC,QAAuD,UAAvD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,MAAMC,eAAe,GAAGP,GAAI;;;;;;;;;;;;;;;;CAA5B;;AAkBA,MAAMQ,kBAAkB,GAAG,MAAM;AAC/B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,KAAK,CAACc,QAAN,CAAe,CAAf,CAAtC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,MAAoChB,QAAQ,CAACQ,eAAD,EAAkB;AAClES,IAAAA,SAAS,EAAE;AAAEC,MAAAA,IAAI,EAAER;AAAR;AADuD,GAAlB,CAAlD;AAGA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BtB,KAAK,CAACc,QAAN,CAAe,EAAf,CAAlC,CAL+B,CAO/B;AACA;AACA;AACA;AACA;;AAEA,QAAMS,QAAQ,GAAG,MAAM;AACrB,QAAIR,IAAI,CAACM,SAAL,CAAeG,IAAf,CAAoBC,IAAxB,EAA8B;AAC5BZ,MAAAA,cAAc,CAACa,IAAI,IAAKA,IAAI,IAAI,CAAlB,CAAd;AACAT,MAAAA,OAAO,GAFqB,CAG5B;AACA;AACA;AACD;;AACD;AACD,GATD;;AAUAR,EAAAA,iBAAiB,CAACc,QAAD,CAAjB;AAEA,SACE,4BACE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AACE,IAAA,UAAU,EAAER,IAAI,CAACM,SAAL,CAAeG,IAAf,CAAoBG,KADlC;AAEE,IAAA,IAAI,EAAEC,SAFR;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGb,IAAI,IACHA,IAAI,CAACM,SAAL,CAAeQ,OAAf,CAAuBC,GAAvB,CAA2BC,QAAQ,IACjC,MAAC,IAAD;AAAM,IAAA,IAAI,EAAG,cAAaA,QAAQ,CAACC,EAAG,EAAtC;AAAyC,IAAA,GAAG,EAAED,QAAQ,CAACC,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAED,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CAPJ,CADF,CADF,CADF;AAqBD,CA9CD;;AAgDA,eAAepB,kBAAf","sourcesContent":["import React from 'react';\nimport Link from 'next/link';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nimport { StyledLocationsContainer, ErrorMessage } from './styles';\n\nimport Loader from 'src/components/Loader';\nimport LocationItem from './LocationItem';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScroll';\n\nconst LOCATIONS_QUERY = gql`\n  query Locations($page: Int!) {\n    locations(page: $page) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        name\n        type\n        id\n      }\n    }\n  }\n`;\n\nconst LocationsContainer = () => {\n  const [currentPage, setCurrentPage] = React.useState(0);\n  const { data, error, refetch, loading } = useQuery(LOCATIONS_QUERY, {\n    variables: { page: currentPage }\n  });\n  const [locations, setLocations] = React.useState([]);\n\n  // React.useEffect(() => {\n  //   setLocations(prevState =>\n  //     prevState.concat((data && data.locations.results) || [])\n  //   );\n  // }, [data]);\n\n  const loadMore = () => {\n    if (data.locations.info.next) {\n      setCurrentPage(prev => (prev += 1));\n      refetch();\n      // setLocations(\n      //   prevState => data && [...prevState, ...data.locations.results]\n      // );\n    }\n    return;\n  };\n  useInfiniteScroll(loadMore);\n\n  return (\n    <>\n      <StyledLocationsContainer>\n        <InfiniteScroll\n          dataLength={data.locations.info.count}\n          next={fetchData}\n          hasMore={true}\n          loader={<Loader />}\n        >\n          {data &&\n            data.locations.results.map(location => (\n              <Link href={`/locations/${location.id}`} key={location.id}>\n                <a>\n                  <LocationItem location={location} />\n                </a>\n              </Link>\n            ))}\n        </InfiniteScroll>\n      </StyledLocationsContainer>\n    </>\n  );\n};\n\nexport default LocationsContainer;\n"]},"metadata":{},"sourceType":"module"}