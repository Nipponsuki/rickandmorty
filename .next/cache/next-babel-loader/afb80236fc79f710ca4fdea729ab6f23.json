{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationDetails/index.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Location($id: ID!) {\\n    location(id: $id) {\\n      name\\n      type\\n      id\\n      residents {\\n        image\\n        id\\n        name\\n        type\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport Link from 'next/link';\nimport { DetailsImage } from './styles';\nimport { Title, Text } from '../LocationsContainer/LocationItem/styles';\nimport { StyledLocationsContainer } from '../LocationsContainer/styles';\nimport { getLocationImage } from 'src/utils/helpers';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScrollWithoutPagination';\nimport ResidentItem from './ResidentItem';\nimport Loader from '../Loader';\nvar LOCATION_QUERY = gql(_templateObject());\n\nvar LocationDetails = function LocationDetails(_ref) {\n  var id = _ref.id;\n\n  var _useQuery = useQuery(LOCATION_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data;\n\n  var _useInfiniteScroll = useInfiniteScroll(data && data.location.residents.length),\n      count = _useInfiniteScroll.count;\n\n  return __jsx(React.Fragment, null, data && __jsx(React.Fragment, null, __jsx(DetailsImage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: getLocationImage(data.location.type),\n    alt: data.location.type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), __jsx(Title, {\n    margin: \"45px 5px 5px 5px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, data.location.name), __jsx(Text, {\n    margin: \"5px\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, data.location.type), __jsx(Title, {\n    textAlign: \"center\",\n    margin: \"25px 0 0 0 \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Residents\"), __jsx(StyledLocationsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, data && data.location.residents.slice(0, count).map(function (resident) {\n    return __jsx(Link, {\n      href: \"/residents/\".concat(resident.id),\n      key: resident.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, __jsx(ResidentItem, {\n      resident: resident,\n      locationType: data.location.type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })));\n  }), count === data.location.residents.length && __jsx(Loader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))));\n};\n\nexport default LocationDetails;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationDetails/index.js"],"names":["React","useQuery","gql","Link","DetailsImage","Title","Text","StyledLocationsContainer","getLocationImage","useInfiniteScroll","ResidentItem","Loader","LOCATION_QUERY","LocationDetails","id","variables","data","location","residents","length","count","type","name","slice","map","resident"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,2CAA5B;AACA,SAASC,wBAAT,QAAyC,8BAAzC;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,iBAAT,QAAkC,8CAAlC;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,IAAMC,cAAc,GAAGV,GAAH,mBAApB;;AAgBA,IAAMW,eAAe,GAAG,SAAlBA,eAAkB,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,kBACjBb,QAAQ,CAACW,cAAD,EAAiB;AACxCG,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AAD6B,GAAjB,CADS;AAAA,MAC1BE,IAD0B,aAC1BA,IAD0B;;AAAA,2BAIhBP,iBAAiB,CAACO,IAAI,IAAIA,IAAI,CAACC,QAAL,CAAcC,SAAd,CAAwBC,MAAjC,CAJD;AAAA,MAI1BC,KAJ0B,sBAI1BA,KAJ0B;;AAMlC,SACE,4BACGJ,IAAI,IACH,4BACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAER,gBAAgB,CAACQ,IAAI,CAACC,QAAL,CAAcI,IAAf,CADvB;AAEE,IAAA,GAAG,EAAEL,IAAI,CAACC,QAAL,CAAcI,IAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAOE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCL,IAAI,CAACC,QAAL,CAAcK,IAAhD,CAPF,EAQE,MAAC,IAAD;AAAM,IAAA,MAAM,EAAC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBN,IAAI,CAACC,QAAL,CAAcI,IAAlC,CARF,EASE,MAAC,KAAD;AAAO,IAAA,SAAS,EAAC,QAAjB;AAA0B,IAAA,MAAM,EAAC,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBATF,EAYE,MAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,IAAI,IACHA,IAAI,CAACC,QAAL,CAAcC,SAAd,CAAwBK,KAAxB,CAA8B,CAA9B,EAAiCH,KAAjC,EAAwCI,GAAxC,CAA4C,UAAAC,QAAQ;AAAA,WAClD,MAAC,IAAD;AAAM,MAAA,IAAI,uBAAgBA,QAAQ,CAACX,EAAzB,CAAV;AAAyC,MAAA,GAAG,EAAEW,QAAQ,CAACX,EAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,YAAD;AACE,MAAA,QAAQ,EAAEW,QADZ;AAEE,MAAA,YAAY,EAAET,IAAI,CAACC,QAAL,CAAcI,IAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADkD;AAAA,GAApD,CAFJ,EAYGD,KAAK,KAAKJ,IAAI,CAACC,QAAL,CAAcC,SAAd,CAAwBC,MAAlC,IAA4C,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZ/C,CAZF,CAFJ,CADF;AAiCD,CAvCD;;AAyCA,eAAeN,eAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport Link from 'next/link';\n\nimport { DetailsImage } from './styles';\nimport { Title, Text } from '../LocationsContainer/LocationItem/styles';\nimport { StyledLocationsContainer } from '../LocationsContainer/styles';\n\nimport { getLocationImage } from 'src/utils/helpers';\nimport { useInfiniteScroll } from 'src/hooks/useInfiniteScrollWithoutPagination';\n\nimport ResidentItem from './ResidentItem';\nimport Loader from '../Loader';\n\nconst LOCATION_QUERY = gql`\n  query Location($id: ID!) {\n    location(id: $id) {\n      name\n      type\n      id\n      residents {\n        image\n        id\n        name\n        type\n      }\n    }\n  }\n`;\n\nconst LocationDetails = ({ id }) => {\n  const { data } = useQuery(LOCATION_QUERY, {\n    variables: { id }\n  });\n  const { count } = useInfiniteScroll(data && data.location.residents.length);\n\n  return (\n    <>\n      {data && (\n        <>\n          <DetailsImage>\n            <img\n              src={getLocationImage(data.location.type)}\n              alt={data.location.type}\n            />\n          </DetailsImage>\n          <Title margin=\"45px 5px 5px 5px\">{data.location.name}</Title>\n          <Text margin=\"5px\">{data.location.type}</Text>\n          <Title textAlign=\"center\" margin=\"25px 0 0 0 \">\n            Residents\n          </Title>\n          <StyledLocationsContainer>\n            {data &&\n              data.location.residents.slice(0, count).map(resident => (\n                <Link href={`/residents/${resident.id}`} key={resident.id}>\n                  <a>\n                    <ResidentItem\n                      resident={resident}\n                      locationType={data.location.type}\n                    />\n                  </a>\n                </Link>\n              ))}\n            {count === data.location.residents.length && <Loader />}\n          </StyledLocationsContainer>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default LocationDetails;\n"]},"metadata":{},"sourceType":"module"}