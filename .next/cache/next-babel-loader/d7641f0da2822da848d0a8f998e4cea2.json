{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Desktop/rickandmorty/components/LocationsContainer/LocationItem/index.js\";\nvar __jsx = React.createElement;\nimport React, { memo } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { ItemContainer, ItemInfo, ItemImage, Title, Text, LocationItemResidentsContainer, LocationItemResident } from './styles';\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\nimport { adjustType } from 'src/utils/helpers';\nconst LOCATION_QUERY = gql`\n  query Location($id: ID!) {\n    location(id: $id) {\n      residents {\n        image\n        id\n        name\n      }\n    }\n  }\n`;\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\nconst LocationItem = memo(({\n  location: {\n    id,\n    name,\n    type\n  }\n}) => {\n  const {\n    data\n  } = useQuery(LOCATION_QUERY, {\n    variables: {\n      id\n    }\n  });\n  return __jsx(ItemContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(ItemImage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: LOCATION_TYPES[adjustType(type)] ? LOCATION_TYPES[adjustType(type)] : unknownTypeImage,\n    alt: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), __jsx(ItemInfo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, __jsx(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, name), __jsx(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, type), __jsx(LocationItemResidentsContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, data && data.location.residents.slice(0, 3).map(resident => __jsx(React.Fragment, {\n    key: resident.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, resident.image && __jsx(LocationItemResident, {\n    key: resident.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: resident.image,\n    alt: resident.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })))))));\n});\nexport default LocationItem;","map":{"version":3,"sources":["/Users/alex/Desktop/rickandmorty/components/LocationsContainer/LocationItem/index.js"],"names":["React","memo","gql","useQuery","ItemContainer","ItemInfo","ItemImage","Title","Text","LocationItemResidentsContainer","LocationItemResident","unknownTypeImage","clusterTypeImage","dreamTypeImage","fantasyTownTypeImage","microverseTypeImage","planetTypeImage","resortTypeImage","spaceStationTypeImage","tvTypeImage","adjustType","LOCATION_QUERY","LOCATION_TYPES","unknown","cluster","dream","fantasy_town","microverse","planet","resort","space_station","tv","LocationItem","location","id","name","type","data","variables","residents","slice","map","resident","image"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,SACEC,aADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,IALF,EAMEC,8BANF,EAOEC,oBAPF,QAQO,UARP;AAUA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,cAAP,MAA2B,4CAA3B;AACA,OAAOC,oBAAP,MAAiC,mDAAjC;AACA,OAAOC,mBAAP,MAAgC,iDAAhC;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,qBAAP,MAAkC,oDAAlC;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,MAAMC,cAAc,GAAGnB,GAAI;;;;;;;;;;CAA3B;AAYA,MAAMoB,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAEZ,gBADY;AAErBa,EAAAA,OAAO,EAAEZ,gBAFY;AAGrBa,EAAAA,KAAK,EAAEZ,cAHc;AAIrBa,EAAAA,YAAY,EAAEZ,oBAJO;AAKrBa,EAAAA,UAAU,EAAEZ,mBALS;AAMrBa,EAAAA,MAAM,EAAEZ,eANa;AAOrBa,EAAAA,MAAM,EAAEZ,eAPa;AAQrBa,EAAAA,aAAa,EAAEZ,qBARM;AASrBa,EAAAA,EAAE,EAAEZ;AATiB,CAAvB;AAYA,MAAMa,YAAY,GAAG/B,IAAI,CAAC,CAAC;AAAEgC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAYC,IAAAA;AAAZ;AAAZ,CAAD,KAAsC;AAC9D,QAAM;AAAEC,IAAAA;AAAF,MAAWlC,QAAQ,CAACkB,cAAD,EAAiB;AACxCiB,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AAD6B,GAAjB,CAAzB;AAGA,SACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EACDZ,cAAc,CAACF,UAAU,CAACgB,IAAD,CAAX,CAAd,GACId,cAAc,CAACF,UAAU,CAACgB,IAAD,CAAX,CADlB,GAEIzB,gBAJR;AAME,IAAA,GAAG,EAAEyB,IANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAWE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQD,IAAR,CADF,EAEE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOC,IAAP,CAFF,EAGE,MAAC,8BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,IACHA,IAAI,CAACJ,QAAL,CAAcM,SAAd,CAAwBC,KAAxB,CAA8B,CAA9B,EAAiC,CAAjC,EAAoCC,GAApC,CAAwCC,QAAQ,IAC9C,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAEA,QAAQ,CAACR,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGQ,QAAQ,CAACC,KAAT,IACC,MAAC,oBAAD;AAAsB,IAAA,GAAG,EAAED,QAAQ,CAACR,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEQ,QAAQ,CAACC,KAAnB;AAA0B,IAAA,GAAG,EAAED,QAAQ,CAACP,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF,CAFJ,CAHF,CAXF,CADF;AA8BD,CAlCwB,CAAzB;AAoCA,eAAeH,YAAf","sourcesContent":["import React, { memo } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport {\n  ItemContainer,\n  ItemInfo,\n  ItemImage,\n  Title,\n  Text,\n  LocationItemResidentsContainer,\n  LocationItemResident\n} from './styles';\n\nimport unknownTypeImage from 'src/assets/images/location-types/unknown.png';\nimport clusterTypeImage from 'src/assets/images/location-types/cluster.png';\nimport dreamTypeImage from 'src/assets/images/location-types/dream.png';\nimport fantasyTownTypeImage from 'src/assets/images/location-types/fantasy-town.png';\nimport microverseTypeImage from 'src/assets/images/location-types/microverse.png';\nimport planetTypeImage from 'src/assets/images/location-types/planet.png';\nimport resortTypeImage from 'src/assets/images/location-types/resort.png';\nimport spaceStationTypeImage from 'src/assets/images/location-types/space-station.png';\nimport tvTypeImage from 'src/assets/images/location-types/tv.png';\n\nimport { adjustType } from 'src/utils/helpers';\n\nconst LOCATION_QUERY = gql`\n  query Location($id: ID!) {\n    location(id: $id) {\n      residents {\n        image\n        id\n        name\n      }\n    }\n  }\n`;\n\nconst LOCATION_TYPES = {\n  unknown: unknownTypeImage,\n  cluster: clusterTypeImage,\n  dream: dreamTypeImage,\n  fantasy_town: fantasyTownTypeImage,\n  microverse: microverseTypeImage,\n  planet: planetTypeImage,\n  resort: resortTypeImage,\n  space_station: spaceStationTypeImage,\n  tv: tvTypeImage\n};\n\nconst LocationItem = memo(({ location: { id, name, type } }) => {\n  const { data } = useQuery(LOCATION_QUERY, {\n    variables: { id }\n  });\n  return (\n    <ItemContainer>\n      <ItemImage>\n        <img\n          src={\n            LOCATION_TYPES[adjustType(type)]\n              ? LOCATION_TYPES[adjustType(type)]\n              : unknownTypeImage\n          }\n          alt={type}\n        />\n      </ItemImage>\n      <ItemInfo>\n        <Title>{name}</Title>\n        <Text>{type}</Text>\n        <LocationItemResidentsContainer>\n          {data &&\n            data.location.residents.slice(0, 3).map(resident => (\n              <React.Fragment key={resident.id}>\n                {resident.image && (\n                  <LocationItemResident key={resident.id}>\n                    <img src={resident.image} alt={resident.name} />\n                  </LocationItemResident>\n                )}\n              </React.Fragment>\n            ))}\n        </LocationItemResidentsContainer>\n      </ItemInfo>\n    </ItemContainer>\n  );\n});\n\nexport default LocationItem;\n"]},"metadata":{},"sourceType":"module"}